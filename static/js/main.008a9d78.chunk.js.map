{"version":3,"sources":["redux/action_types.js","redux/reducers.js","redux/configStore.js","components/home.js","components/login.js","redux/action_creator.js","components/main.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["LOGGING_FAILED","LOGGING_SUCCESS","LOGGING","user","state","isLoading","errMess","data","action","type","ActionTypes","payload","ConfigureStore","createStore","combineReducers","applyMiddleware","thunk","logger","Home","this","props","username","password","React","Component","Login","handleSubmit","bind","onChangeHandler","console","log","event","preventDefault","login","history","setState","target","name","value","className","style","color","onSubmit","autoComplete","id","onChange","userFakeData","token","logging","loggingSuccess","response","loggingFailed","Main","exact","path","component","undefined","to","withRouter","connect","dispatch","push","error","message","userLogin","store","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","serviceWorkerUrl","process","serviceWorker","register","navigator","window","addEventListener","registration","scope","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.008a9d78.chunk.js","sourcesContent":["export const LOGGING_FAILED = 'LOGGING_FAILED';\nexport const LOGGING_SUCCESS= 'LOGGING_SUCCESS';\nexport const LOGGING        = 'LOGGING';","import * as ActionTypes from './action_types';\n\nexport const user = (state = { isLoading: false, errMess: null, data: [] }, action) => {\n  switch (action.type) {\n\n    case ActionTypes.LOGGING_FAILED:\n      return { ...state, isLoading: false, errMess: action.payload };\n    case ActionTypes.LOGGING_SUCCESS:\n      return { ...state, isLoading: false, errMess: null, data: action.payload };\n    case ActionTypes.LOGGING:\n      return { ...state, isLoading: true, errMess: null };\n    default:\n      return state;\n  }\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport {user} from './reducers';\nconst ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            user:user\n        }), applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}\n\nexport default ConfigureStore;","import React from 'react';\n\nclass Home extends React.Component{\n    render(){\n        const{username,password} = this.props.props.user.data;\n        return(\n            <>\n            <h2>Welcome, {username} !</h2>\n            <b>Your credentials</b>\n          <fieldset>\n          <p>username: {username}</p>\n            <p>password:{password}</p>\n          </fieldset>\n           \n            </>\n        )\n    }\n}\nexport default Home;","import React from 'react';\n\nclass Login extends React.Component{\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             username:\"\",\n             password:\"\"\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.onChangeHandler = this.onChangeHandler.bind(this)\n    }\n    componentDidMount()\n    {\n        console.log(this.props)\n    }\n    handleSubmit(event){\n        event.preventDefault();\n        const{username,password}=this.state;\n        console.log(`${username} ${password}`)\n        let data = {username:username,password:password}\n        this.props.props.login(data,this.props.props.history);\n    }\n    onChangeHandler(event){\n        this.setState({[event.target.name]: event.target.value});\n      \n    }\n    render(){\n        return(\n            <>\n               <div className=\"login-container\">\n                 <h6 style={{color:\"red\"}}>{this.props.props.user.errMess}</h6>\n                    <h3>Login</h3>\n                  <form onSubmit={this.handleSubmit}>\n                  <div>\n                        <label>Username:</label>\n                        <input type=\"text\" autoComplete=\"off\" name=\"username\" id=\"u-value\" value={this.state.username} onChange={this.onChangeHandler}/>\n                    </div>\n                    <div>\n                        <label>Password:</label>\n                        <input type=\"password\" autoComplete=\"off\" name=\"password\" id=\"p-value\" value={this.state.password} onChange={this.onChangeHandler}/>\n                    </div>\n                    <button type=\"sumit\">Button</button>\n                  </form>\n                  <div>\n                      Type:-\n                      <br/>\n                      username:swetabh\n                      <br/>\n                      password:0000\n                  </div>\n               </div>\n            </>\n        )\n    }\n}\nexport default Login;","import * as ActionTypes from './action_types';\n\n//const url = 'https://app.herokuapp.com';\nconst userFakeData = {\n    username:\"swetabh\",\n    password:\"0000\",\n    token:\"ey.kgueibdjkqbehduibqdjkqidqwedq3rv\"\n}\n\nexport const userLogin= (data,history) => dispatch => {\n\n    dispatch(logging(true));\n    try{\n        if(data!=null){\n\n            if(data.username===userFakeData.username&&data.password===userFakeData.password){\n                history.push('/home');\n                dispatch(loggingSuccess(userFakeData))\n            }\n            else{\n                dispatch(loggingFailed(\"Invalid login\"));\n            }\n\n        }\n    }\n    catch(error){ \n        dispatch(loggingFailed(error.message));\n    };\n    //user \n  /*   return fetch(`${url}/login`, {\n\n        method: \"GET\",\n\n    })\n        .then(response => {\n\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n            error => {\n                throw error;\n            }\n        )\n        .then(response => response.json())\n        .then(response => {\n\n            //console.log(response);\n            dispatch(loggingSuccess(response))\n\n\n        })\n        .catch(error => dispatch(loggingFailed(error.message))); */\n}\n\n\n\nexport const logging= () => ({\n    type: ActionTypes.LOGGING\n});\n\nexport const loggingSuccess = (response) => ({\n    type: ActionTypes.LOGGING_SUCCESS,\n    payload: response\n});\n\nexport const loggingFailed = (response) => ({\n    type: ActionTypes.LOGGING_FAILED,\n    payload: response\n});\n","import React from 'react';\nimport { withRouter, Switch, Route ,Redirect} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Home from './home';\nimport Login from './login';\nimport {userLogin} from '../redux/action_creator';\nconst mapStateToProps = state => {\n    return {\n\n        user: state.user\n    };\n\n}\nconst mapDispatchToProps = dispatch => ({\n    login: (data,history) => dispatch(userLogin(data,history)),\n})\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props)\n   \n    }\n    componentDidMount(){\n        console.log(this.props)\n    }\n    render() {\n       \n        return (\n            <div className=\"main\">\n                <Switch>\n                    <Route\n                        exact={true}\n                        path={'/'}\n                        component={()=><Login props={this.props}/>}\n                    />\n                    <Route\n                        exact={true}\n                        path={'/home'}\n                        component={()=> this.props.user.data.token!==undefined?<Home props={this.props}/>:<Redirect to=\"/\"/>}\n                    />\n                    <Route\n                        exact={false}\n                        path={'/*'}\n                        component={()=> this.props.user.data.token!==undefined?<Home props={this.props}/>:<Redirect to=\"/\"/>}\n                    />\n                </Switch>\n              \n            </div>\n        )\n    }\n\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport ConfigureStore from './redux/configStore';\nimport './App.css';\nimport Main from './components/main'\nconst store = ConfigureStore();\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        < Router >\n          <Main />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const serviceWorkerUrl = `${process.env.PUBLIC_URL}/sw.js`\nconst serviceWorker = {\n  register:()=>{\n\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', function () {\n        navigator.serviceWorker.register(serviceWorkerUrl).then(function (registration) {\n          // Registration was successful\n          console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }, function (err) {\n          // registration failed :(\n          console.log('ServiceWorker registration failed: ', err);\n        });\n      });\n    }\n  }\n    \n}\n\nexport default serviceWorker;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();"],"sourceRoot":""}